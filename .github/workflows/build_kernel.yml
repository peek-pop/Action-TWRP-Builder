name: Build Kernel
on:
  workflow_dispatch:
    inputs:
      BRANCH:
        description: Kernel branch
        default: 'master'
        required: true
      BUILD_TARGET:
        description: 'Build target'
        required: true
        default: 'kernel'
        type: choice
        options:
          - kernel
          - defconfig
      TARGET_DEVICE:
        description: 'Target Device'
        required: true
        default: 'a04e'
        type: choice
        options:
          - a04e
          - a03s
          - m04
      LTO:
        description: 'Link Time Optimisation'
        required: true
        default: 'none'
        type: choice
        options:
          - none
          - thin
          - full
      KSU:
        description: Add KernelSU support
        type: boolean
      UPLOAD_TO_TG:
        description: Upload to Telegram
        type: boolean
      SILENT_BUILD:
        description: Silent Build logs
        type: boolean
        
jobs:
  build:
    runs-on: ubuntu-latest
    environment: secureEnvironment
    steps:
    - name: Get date
      id: rundate
      run: sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/Asia/Jakarta /etc/localtime && echo "REPO_DATE=`date`" >> $GITHUB_OUTPUT
    - uses: actions/checkout@v4
      with:
        path: kernel_root
        repository: Citty2029/a04e-k
        ref: ${{ github.event.inputs.BRANCH }}
        show-progress: false
        fetch-depth: 1

    - name: Prepare dependencies
      run: |
        sudo apt update -y
        sudo apt install bc cpio flex bison aptitude git python-is-python3 tar perl wget curl lz4 -y
        sudo aptitude install libssl-dev -y
        
    - name: Fetch toolchains
      run: |
        mkdir toolchains
        cd toolchains
        mkdir clang && cd clang
        #URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz"
        URL="https://github.com/ZyCromerZ/Clang/releases/download/21.0.0git-20250314-release/Clang-21.0.0git-20250314.tar.gz"
        echo "[+] Fetching ZyClang 21 ..."
        wget -q -O clang.tar.gz $URL
        tar -xf clang.tar.gz && rm clang.tar.gz && cd ..
      working-directory: kernel_root
      
    - name: Build kernel
      id: buildKernel
      run: |
        export PATH=$(pwd)/toolchains/clang/bin:$PATH
        #export CROSS_COMPILE=$(pwd)/toolchains/gcc-10/bin/aarch64-buildroot-linux-gnu-
        export CROSS_COMPILE="aarch64-linux-gnu-"
        export CLANG_TRIPLE="aarch64-linux-gnu-"
        export KBUILD_BUILD_USER="peek-pop"
        export KBUILD_BUILD_HOST="peek-poporgs"
        export BUILD_START=`date`
        export SELINUX_STATE="Enforcing"
        export IS_CI=true
        export LTO="${{ github.event.inputs.LTO }}"
        export BINARY_WORKAROUND="${{ github.event.inputs.TARGET_BINARY }}"
        export SILENT="${{ github.event.inputs.SILENT_BUILD }}"

        # clone mtk connectivity
        #rm -rf drivers/misc/mediatek/connectivity && cd drivers/misc/mediatek/ && git clone https://github.com/rsuntkOrgs/mtk_connectivity_module --depth=1 -b staging-4.19 connectivity && rm -rf connectivity/.git && cd ../../..

        if [[ "${{ github.event.inputs.TARGET_DEVICE }}" = "a03s" ]]; then
          export DEFCONFIG="rsuntk-a03s_defconfig"
          export DEVICE="A037F"
          export DEVICE_ID="A03s"
          export TARGET_PRODUCT=a03s
        elif [[ "${{ github.event.inputs.TARGET_DEVICE }}" = "a04e" ]]; then
          export DEFCONFIG="rsuntk-a04e_defconfig"
          export DEVICE="A042F"
          export DEVICE_ID="A04e"
          export TARGET_PRODUCT=a04
        fi

        BUILD_TARGET="${{ github.event.inputs.BUILD_TARGET }}"

        if [[ "$BUILD_TARGET" != "defconfig" ]]; then
          export KERNELSU="${{ github.event.inputs.KSU }}"
        fi
        
        bash $(pwd)/build.sh `echo $BUILD_TARGET` --jobs $(nproc --all) `echo $DEFCONFIG`

        if [[ "$BUILD_TARGET" = "kernel" ]]; then
          if [[ "${{ github.event.inputs.KSU }}" = "true" ]]; then
          	KSU_REV_COUNT=$(cd KernelSU && git rev-list --count HEAD)
          	KSU_VERSION=$(expr 10200 + $KSU_REV_COUNT)
          else
          	KSU_VERSION="No KernelSU"
          fi
          echo "- KernelSU version: $KSU_VERSION"
          
          ## CREATE buildDetails.txt
          printf "Localversion: `./getutsrel`
        Clang version: `clang -v 2>&1 | grep ' version ' | sed 's/[[:space:]]*$//'`
        Build: `echo $BUILD_START`
        Defconfig: `echo $DEFCONFIG`
        KernelSU: `echo $KSU_VERSION`
        LTO: `echo $LTO`
        SELinux: `echo $SELINUX_STATE`" >> buildDetails.txt
          
          echo "TITLE=Galaxy `echo $DEVICE_ID` Kernel" >> $GITHUB_ENV
        fi
        
        gitsha1=$(git rev-parse --short HEAD)
        buildDetails="`make kernelversion`-`echo $DEVICE`_`echo $gitsha1`-`date +'%Y%m%d%H%M%S'`" && echo "buildDetails=$buildDetails" >> $GITHUB_OUTPUT
        mv out/.config out/build_config.txt
      working-directory: kernel_root
      
    - name: Upload config
      uses: actions/upload-artifact@v4
      with:
        name: Config-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/out/build_config.txt
        
    - name: Upload artifacts
      if: github.event.inputs.BUILD_TARGET == 'kernel'
      uses: actions/upload-artifact@v4
      with:
        name: Build-${{ steps.buildKernel.outputs.buildDetails }}
        path: |
          kernel_root/out/arch/arm64/boot/*.gz
          kernel_root/out/arch/arm64/boot/dts/mediatek/*.dtb

    - name: Upload AnyKernel3
      if: github.event.inputs.BUILD_TARGET == 'kernel'
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/AnyKernel3/*
        compression-level: 9
        
    - name: Upload to Telegram
      if: github.event.inputs.UPLOAD_TO_TG == 'true' && github.event.inputs.BUILD_TARGET == 'kernel'
      env:
        CHAT_ID: ${{ secrets.CHAT_ID }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      run: |
        if [ ! -z "${{ secrets.BOT_TOKEN }}" ]; then
          ZIP=$(find `pwd` -name "*.zip")
          git clone https://github.com/rsuntk/rsuntkBotScript.git --depth=1 i && cp ./i/* . && rm -rf i
          bash $(pwd)/rsuntkbot.sh $ZIP "`cat buildDetails.txt`"
        fi
      working-directory: kernel_root
        
    - name: Strip LKMs
      continue-on-error: true
      run: |
        # Cleanup zip
        rm -rf *.zip

        # Create folder
        mkdir ../kernel_object_tmp
        mkdir kernel_object

        # Only move neccessary path!
        find $(pwd) -type f -name "*.ko" -exec mv {} ../kernel_object_tmp \;
        LIST=$(find ../kernel_object_tmp -type f -name "*.ko")

        # Start stripping
        for file in $LIST; do
          echo -e "- Stripping `basename $file`"
          $(pwd)/toolchains/clang/bin/llvm-strip "$file" --strip-unneeded
        done
        mv ../kernel_object_tmp/*.ko $(pwd)/kernel_object/
      working-directory: kernel_root
        
    - name: Upload LKM
      uses: actions/upload-artifact@v4
      with:
        name: LKM-${{ steps.buildKernel.outputs.buildDetails }}
        path: kernel_root/kernel_object/*
